@model object

<!DOCTYPE html>

<html>
<head>
    <title>OAuth</title>
</head>
<body>
<div>
    <div>
        <h1>Get OAuth Code</h1>
        <button onclick="GetOAuthCode('Google')">Google</button>
        <button onclick="GetOAuthCode('Facebook')">Facebook</button>
        <button onclick="GetOAuthCode('Microsoft')">Microsoft</button>
        <button onclick="GetOAuthCode('AzureAD')">AzureAD</button>
        <button onclick="GetOAuthCode('GitHub')">GitHub</button>
        <button onclick="GetOAuthCode('Twitter')">Twitter</button>
    </div>

    <div>
        <h1>Sign-in via OAuth</h1>
        <button onclick="SignInVia('Google')">Google</button>
        <button onclick="SignInVia('Facebook')">Facebook</button>
        <button onclick="SignInVia('Microsoft')">Microsoft</button>
        <button onclick="SignInVia('AzureAD')">AzureAD</button>
        <button onclick="SignInVia('GitHub')">GitHub</button>
        <button onclick="SignInVia('Twitter')">Twitter</button>
    </div>
    <div>
        <h1>Values</h1>
        <button onclick="GetValues()">Get Values</button>
    </div>

</div>
<script>
    var _resolveOAuthPromise;
    var _rejectOAuthPromise;
    var _accessToken;

    function GetOAuthCode(provider) {
        window.removeEventListener("message", this.oAuthCodeReceived, false);
        window.addEventListener("message", this.oAuthCodeReceived, false);
        let promise = new Promise((resolve, reject) => {
            _resolveOAuthPromise = resolve;
            _rejectOAuthPromise = reject;

            window.open(
                `${window.location.protocol}//${window.location.hostname}:${window.location.port
                }/external-auth/challenge?provider=${provider}`,
                undefined,
                'toolbar=no,menubar=no,directories=no,status=no,width=800,height=600');
        });
        return promise;
    }

    function externalAuthSuccess(provider, code) {
        _resolveOAuthPromise({ provider, code });
        alert(`Provider: ${provider}, code: ${code}`);
    }

    function externalAuthError(provider, error, errorDescription) {
        _rejectOAuthPromise({ provider, error, errorDescription });
        alert(`Provider: ${provider}, error: ${error}, ${errorDescription}`);
    }

    function oAuthCodeReceived(message) {
        if (message.data && message.data.type === 'oauth-result') {
            let data = message.data;
            if (data.code) {
                externalAuthSuccess(data.provider, data.code);
            } else {
                externalAuthError(data.provider, data.error, data.errorDescription);
            }
        }
    }

    function SignInVia(provider) {
        GetOAuthCode(provider).then(function(data) {
            GetAccessToken(data.provider, data.code);
        });
    }

    function GetAccessToken(provider, code) {

        fetch(`/connect/token`,
                {
                    method: 'POST',
                    body: `grant_type=external&scope=api1&provider=${provider}&code=${code}`,
                    headers: {
                        'Authorization': `Basic Y2xpZW50OnNlY3JldA==`, //base64 encoded 'client:secret'
                        'Content-Type': 'application/x-www-form-urlencoded',
                    }
                })
            .then(response => response.json())
            .then(dt => {
                _accessToken = dt.access_token;
                alert(`access_token: ${dt.access_token}`);
            });
    }

    function GetValues() {
        fetch(`/api/values`,
                {
                    headers: {
                        'Authorization': `Bearer ${_accessToken}`,
                        'Content-Type': 'application/json;'
                    }
                })
            .catch(error => {
                alert(error);
            })
            .then(response => {
                if (!response.ok) {
                    alert('Error (Unauthorized)');
                    return null;
                }
                return response.json();
            })
            .then(dt => {
                if (dt != null) {
                    console.log(dt);
                    alert(dt);
                }
            });
    }
</script>
</body>
</html>